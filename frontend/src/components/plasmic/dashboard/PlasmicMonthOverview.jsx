// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8znNZcv6xBEvZ93btMnbkW
// Component: jxV_OlULnvqa
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: zTrlxyMj1N6v/component
import DateTimeRangePicker from "../../DateTimeRangePicker"; // plasmic-import: QxmPjFisbJk6/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: hfJvyK1l_CkO/component
import Chart from "../../Chart"; // plasmic-import: m0SJ0jNRMlxP/component
import Card from "../../Card"; // plasmic-import: i9YG4qXTUF4L/component
import { useScreenVariants as useScreenVariantssmtTcemE2Fpl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SmtTcemE2FPL/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_dashboard.module.css"; // plasmic-import: 8znNZcv6xBEvZ93btMnbkW/projectcss
import sty from "./PlasmicMonthOverview.module.css"; // plasmic-import: jxV_OlULnvqa/css
import image74Uhp4Lv2P9Eu from "./images/image7.svg"; // plasmic-import: 4Uhp4Lv2p9EU/picture
import orderIconHYkVxeanKSa3 from "./images/orderIcon.svg"; // plasmic-import: hYKVxeanKSa3/picture
import dollarIconRcOk0XfMjO from "./images/dollarIcon.svg"; // plasmic-import: Rc_ok0xfMj_o/picture
import cartIconV63PHeayDwfs from "./images/cartIcon.svg"; // plasmic-import: v63PHeayDwfs/picture

createPlasmicElementProxy;

export const PlasmicMonthOverview__VariantProps = new Array();

export const PlasmicMonthOverview__ArgProps = new Array();

const $$ = {};

function PlasmicMonthOverview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "start.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    totalUsersByMonthCustomRange: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "7c9199ce-dcdb-4bf1-8360-abf7cd1dc936",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.7c9199ce-dcdb-4bf1-8360-abf7cd1dc936.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalOrdersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "4ec65b79-7484-449f-993e-65cf9c80da9b",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.4ec65b79-7484-449f-993e-65cf9c80da9b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "2e39b7e6-0461-45ea-8e40-cdba2bb8ad49",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.2e39b7e6-0461-45ea-8e40-cdba2bb8ad49.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentTotalCustomers: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "3d0ab800-3231-4a95-bc0d-4bff7fe51c63",
        userArgs: {},
        cacheKey: `plasmic.$.3d0ab800-3231-4a95-bc0d-4bff7fe51c63.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    _12MonthRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "5eafd246-395f-4a61-99bb-f12e5e30a942",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.5eafd246-395f-4a61-99bb-f12e5e30a942.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMUserGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "2dfd810c-1e55-4584-aaa7-0917ddc905b2",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.2dfd810c-1e55-4584-aaa7-0917ddc905b2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "4bf87e2f-48f9-4618-b4e0-b192c9aaadbd",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.4bf87e2f-48f9-4618-b4e0-b192c9aaadbd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMAvgOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "736c846b-1541-47ca-a2eb-dcc514b8648d",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.736c846b-1541-47ca-a2eb-dcc514b8648d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMRevenueGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "8dd3729d-9fe9-4127-a053-4f5a4203f7af",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.8dd3729d-9fe9-4127-a053-4f5a4203f7af.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentAvgOrder: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "82d89367-1eac-4dd3-ab17-79f662206c16",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.82d89367-1eac-4dd3-ab17-79f662206c16.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCountriesByRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "3a0c3fbe-d941-4d9e-8ca7-ef3ab87e1a27",
        userArgs: {},
        cacheKey: `plasmic.$.3a0c3fbe-d941-4d9e-8ca7-ef3ab87e1a27.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topProductsByQuantitySold: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "aace3f08-2bdb-4c19-876c-de48954ea7c0",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.aace3f08-2bdb-4c19-876c-de48954ea7c0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalProductsSold: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "38221f7b-32ea-4695-8aa8-05628a32fb70",
        userArgs: {},
        cacheKey: `plasmic.$.38221f7b-32ea-4695-8aa8-05628a32fb70.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCategoriesByOrders: usePlasmicDataOp(() => {
      return {
        sourceId: "nuKzkKRXx5eZpXXNjRbQir",
        opId: "452bb2f3-ebbf-4d52-a642-22f4507c91a8",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.452bb2f3-ebbf-4d52-a642-22f4507c91a8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssmtTcemE2Fpl()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__vX0Gl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fqnF)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Welcome back! "}
                      </h1>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section___7TnJs)}
                  >
                    <DateTimeRangePicker
                      data-plasmic-name={"dateTimeRangePicker"}
                      data-plasmic-override={overrides.dateTimeRangePicker}
                      className={classNames(
                        "__wab_instance",
                        sty.dateTimeRangePicker
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: true,
                          className: classNames("__wab_instance", sty.start),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["start", "value"],
                              AntdDatePicker_Helpers
                            ),
                          picker: "date",
                          popupScopeClassName: sty["start__datePickerPopup"],
                          showTime: false,
                          value: p.generateStateValueProp($state, [
                            "start",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "start.value"
                            }
                          ],

                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdDatePicker
                            data-plasmic-name={"start"}
                            data-plasmic-override={overrides.start}
                            {...child$Props}
                          />
                        );
                      })()}
                    </DateTimeRangePicker>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wbyPu)}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__p3Trl
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vuztz
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__ifQaL
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries
                                          .totalUsersByMonthCustomRange.data[0]
                                          .cumulative_users;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tbESq
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const usersIncreasePercentage =
                                    $queries.moMUserGrowth.data[0]
                                      .user_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      usersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const userIncreasePercentage =
                                      $queries.moMUserGrowth.data[0]
                                        .user_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      userIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        timeRange={"from last month"}
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n6KCp
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__xn5Ti
                              )}
                            >
                              {"Total users"}
                            </p>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__umQQw)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: image74Uhp4Lv2P9Eu,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__wfrhH
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gDqGi
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__iPlmc
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.totalOrdersByDateRange
                                          .data[0].order_count;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__umbZt
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const ordersIncreasePercentage =
                                    $queries.moMOrderGrowth.data[0]
                                      .order_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      ordersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const ordersIncreasePercentage =
                                      $queries.moMOrderGrowth.data[0]
                                        .order_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      ordersIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jMdL
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__fzmwL
                              )}
                            >
                              {"New orders"}
                            </p>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__vy3Te)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: orderIconHYkVxeanKSa3,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__pdgwf
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Wp37
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__hpxfu
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentAvgOrder.data[0]
                                              .avg_order_total
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zEyvD
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const avg_order_value_increase_percentage =
                                    $queries.moMAvgOrderGrowth.data[0]
                                      .avg_order_value_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const avg_order_value_increase_percentage =
                                      $queries.moMAvgOrderGrowth.data[0]
                                        .avg_order_value_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__phGks
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__dI1Fq
                              )}
                            >
                              {"Avg. order value"}
                            </p>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__gZuGx)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: dollarIconRcOk0XfMjO,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__sMgrP
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j4K6
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__vxZqv
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentRevenue.data[0]
                                              .total_revenue_this_month
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yeAb
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const revenueIncreasePercentage =
                                    $queries.moMRevenueGrowth.data[0]
                                      .revenue_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      revenueIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const revenueIncreasePercentage =
                                      $queries.moMRevenueGrowth.data[0]
                                        .revenue_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      revenueIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7XRe
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__ow4Xg
                              )}
                            >
                              {"Total revenue"}
                            </p>
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__pxBj7)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: cartIconV63PHeayDwfs,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />
                    </p.Stack>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__ld0Yn)}
                  >
                    <Chart
                      data-plasmic-name={"chart"}
                      data-plasmic-override={overrides.chart}
                      className={classNames("__wab_instance", sty.chart)}
                      get12MoRevenue={$queries._12MonthRevenue}
                    />
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__vf8F1)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wXx6B)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__iDdpP
                        )}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__zogPm
                            )}
                          >
                            {"Top products sold"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oMmXr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1VnA
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k5Wzx
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topProductsByQuantitySold.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9FgI
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aQ6J
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.product_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rjJlu
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.total_quantity_sold;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__mH8Tv
                        )}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2___9S054
                            )}
                          >
                            {"Top product categories"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pUOtv
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v4IIm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2DJPd
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topCategoriesByOrders.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vx8LC
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ohsS
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.category_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sgdUl
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.num_orders_in_category;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                    </p.Stack>
                  </section>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  pageLayout: ["pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  h1: ["h1"],
  dateTimeRangePicker: ["dateTimeRangePicker", "start"],
  start: ["start"],
  chart: ["chart"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMonthOverview__ArgProps,
          internalVariantPropNames: PlasmicMonthOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMonthOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMonthOverview";
  } else {
    func.displayName = `PlasmicMonthOverview.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"8znNZcv6xBEvZ93btMnbkW"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "8znNZcv6xBEvZ93btMnbkW"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMonthOverview = Object.assign(
  // Top-level PlasmicMonthOverview renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dateTimeRangePicker: makeNodeComponent("dateTimeRangePicker"),
    start: makeNodeComponent("start"),
    chart: makeNodeComponent("chart"),
    // Metadata about props expected for PlasmicMonthOverview
    internalVariantProps: PlasmicMonthOverview__VariantProps,
    internalArgProps: PlasmicMonthOverview__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMonthOverview;
/* prettier-ignore-end */
