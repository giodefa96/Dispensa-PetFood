

  #frontend:
  #  build: ./frontend
  #  volumes:
  #    - ./frontend:/app
  #    - /app/node_modules
  #  ports:
  #    - 3000:3000
  #  environment:
  #    - NODE_ENV=development
  #  command: ["npm", "start"]
    
  #celery:  
  #  build: .  
  #  command: celery -A app worker --loglevel=info  
  #  volumes:  
  #    - .:/web  
  #  environment:  
  #    - DJANGO_SETTINGS_MODULE=app.settings  
  #    - CELERY_BROKER_URL=amqp://guest:guest@rabbitmqServer:5672/  
  #    - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #  networks:
  #    - dispensaPetFood-network
  #  depends_on:  
  #    - db  
  #    - rabbimqServer  
  #    - redis  
  
  #redis:  
  #  image: redis  
  #  networks:
  #    - dispensaPetFood-network
  #  ports:  
  #    - 6379:6379
  #  environment:  
  #    REDIS_HOST: ${REDIS_HOST}  
  #    REDIS_PORT: ${REDIS_PORT}  
  #    REDIS_DB: ${REDIS_DB}


version: '3.9'  

services:  
  db:  
    image: postgres  
    environment:  
      POSTGRES_DB: ${DATABASE_HOST}  
      POSTGRES_USER: ${DATABASE_USER}  
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:  
      - ./data/db:/var/lib/postgresql/data
    networks:
      - dispensaPetFood-network
    ports:
      - 5432:5432  

  mongo:  
    image: mongo  
    ports:  
      - 27017:27017
    networks:
      - dispensaPetFood-network
    volumes:  
      - ./data/mongo:/data/db
    environment:  
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}  
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

  rabbimqServer:
    container_name: rabbitmqServer
    image: rabbitmq:3-management-alpine
    hostname: rabbitmqServer
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - dispensaPetFood-network

  nginx:  
    build: ./nginx  
    ports:  
      - 1337:80  
    volumes:  
      - static_volume:/app/staticfiles/
      - media_volume:/app/mediafiles/  
    networks:
      - dispensaPetFood-network
    depends_on:  
      - server  
    restart: "on-failure"  

  server:  
    build: ./server  
    command:  sh -c "python manage.py makemigrations &&  
                     python manage.py migrate &&  
                     python manage.py collectstatic --noinput &&
                     gunicorn app.wsgi:application --bind 0.0.0.0:8000 --reload"
    volumes:  
      - static_volume:/app/staticfiles/
      - media_volume:/app/mediafiles/  
      - ./app/:/app/:rw
    depends_on:  
      - db  
    container_name: dispensaPetFood-app
    networks:
      - dispensaPetFood-network
    expose:   
      - 8000  
    restart: "on-failure"  

  jobber:
    build:
      context: jobber
      dockerfile: Dockerfile
    volumes:
      - ./jobber:/jobber
    depends_on:
      - db
      - mongo
      - rabbimqServer
    networks:
      - dispensaPetFood-network
    ports:
      - 8001:8000

volumes:  
  postgres_data:  
  static_volume:  
  media_volume:  

networks:
  dispensaPetFood-network:
